.TH "MQSensor" 3 "Fri Oct 27 2017" "Canary" \" -*- nroff -*-
.ad l
.nh
.SH NAME
MQSensor \- 
.SH SYNOPSIS
.br
.PP
.PP
\fC#include <MQSensor\&.hpp>\fP
.PP
Inherited by \fBMQ3\fP, \fBMQ7\fP, \fBMQDummy\fP, and \fBMQPotentiometer\fP\&.
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "double \fBcheck\fP (void)"
.br
.ti -1c
.RI "void \fBsetRlValue\fP (const uint8_t rlvalue)"
.br
.ti -1c
.RI "void \fBsetCalibrationSampleTimes\fP (const uint8_t cst)"
.br
.ti -1c
.RI "void \fBsetCalibrationSampleInterval\fP (const uint8_t csi)"
.br
.ti -1c
.RI "void \fBsetReadSampleInterval\fP (const uint8_t rsi)"
.br
.ti -1c
.RI "void \fBsetReadSampleTimes\fP (const uint8_t rst)"
.br
.ti -1c
.RI "void \fBSetRo\fP (const float ro_factor)"
.br
.ti -1c
.RI "void \fBSetRoCleanAirFactor\fP (const float ro_clean_air_factor)"
.br
.ti -1c
.RI "float const \fBGetRoCleanAirFactor\fP (void)"
.br
.ti -1c
.RI "float const \fBGetRo\fP (void)"
.br
.ti -1c
.RI "float \fBMQTension\fP (const float raw_adc)"
.br
.in -1c
.SS "Static Public Member Functions"

.in +1c
.ti -1c
.RI "static \fBMQSensor\fP \fBNewMQSensor\fP (const uint8_t mqpin, const uint8_t mqtype)"
.br
.in -1c
.SS "Protected Member Functions"

.in +1c
.ti -1c
.RI "\fBMQSensor\fP (const uint8_t mqpin)"
.br
.ti -1c
.RI "float const \fBMQRead\fP ()"
.br
.ti -1c
.RI "float const \fBMQGetPPM\fP (const float sensor_tension, const float *gas_curve)"
.br
.ti -1c
.RI "float \fBMQCalibration\fP ()"
.br
.ti -1c
.RI "float \fBcleanAirCallibrate\fP ()"
.br
.ti -1c
.RI "float const \fBMQResistanceCalculation\fP (const float raw_adc)"
.br
.in -1c
.SS "Protected Attributes"

.in +1c
.ti -1c
.RI "size_t \fB_LAST_READ_TIME\fP = 0"
.br
.ti -1c
.RI "size_t \fB_READ_SENSOR_INTERVAL\fP = 10000"
.br
.ti -1c
.RI "uint8_t \fB_MQ_pin\fP"
.br
.ti -1c
.RI "uint8_t \fB_CALIBARAION_SAMPLE_TIMES\fP = 5"
.br
.ti -1c
.RI "uint8_t \fB_CALIBRATION_SAMPLE_INTERVAL\fP = 50"
.br
.ti -1c
.RI "uint8_t \fB_READ_SAMPLE_INTERVAL\fP = 50"
.br
.ti -1c
.RI "uint8_t \fB_READ_SAMPLE_TIMES\fP = 5"
.br
.ti -1c
.RI "float \fB_RO_CLEAN_AIR_FACTOR\fP = 9\&.83"
.br
.ti -1c
.RI "float \fB_Ro\fP = 10"
.br
.ti -1c
.RI "float \fB_RL_VALUE\fP = 1"
.br
.in -1c
.SH "Detailed Description"
.PP 
This is a father class to all \fBMQSensor\fP types, it is not intended to be instanciated, but can be used as a pointer array if your code needs so, also can be used to instanciate and use multiple types of MQ sensor in the same object\&.
.PP
\fBAuthor:\fP
.RS 4
Daniel Pereira Poltronieri 
.RE
.PP
\fBDate:\fP
.RS 4
October, 2017 Contact: danppoltronieri@gmail.com 
.RE
.PP

.PP
Definition at line 52 of file MQSensor\&.hpp\&.
.SH "Constructor & Destructor Documentation"
.PP 
.SS "MQSensor::MQSensor (const uint8_t mqpin)\fC [protected]\fP"
The constructor is protected, making it impossible to instanciate a \fBMQSensor\fP object\&. This constructor is internally utilized as a part of the sons constructors\&. 
.PP
\fBParameters:\fP
.RS 4
\fImqpin\fP The arduino pin to which the sensor is connected\&. 
.RE
.PP

.PP
Definition at line 73 of file MQSensor\&.cpp\&.
.SH "Member Function Documentation"
.PP 
.SS "double MQSensor::check (void)\fC [inline]\fP"
A fast read of the protected \fBMQSensor::_MQ_pin\fP value\&. 
.PP
\fBReturns:\fP
.RS 4
A fast analogRead() of the \fBMQSensor::_MQ_pin\fP\&. 
.RE
.PP

.PP
Definition at line 66 of file MQSensor\&.hpp\&.
.SS "float MQSensor::cleanAirCallibrate ()\fC [protected]\fP"
Uses the \fBMQSensor::MQCalibration()\fP to directly ser the _RO_CLEAN_AIR_FACTOR\&. 
.PP
\fBReturns:\fP
.RS 4
The current _RO_CLEAN_AIR_FACTOR\&. 
.RE
.PP

.PP
Definition at line 204 of file MQSensor\&.cpp\&.
.SS "float const MQSensor::GetRo (void)"
\fBMQSensor::_Ro\fP getter\&. 
.PP
Definition at line 139 of file MQSensor\&.cpp\&.
.SS "float const MQSensor::GetRoCleanAirFactor (void)"
\fBMQSensor::_RO_CLEAN_AIR_FACTOR\fP getter\&. 
.PP
Definition at line 132 of file MQSensor\&.cpp\&.
.SS "float MQSensor::MQCalibration ()\fC [protected]\fP"
Reads the resistance value os the sensor \fBMQSensor::_CALIBARAION_SAMPLE_TIMES\fP with a delay pf \fBMQSensor::_CALIBRATION_SAMPLE_INTERVAL\fP between readings and uses the average value os the readings to set the temporary RO, witch is divided by \fBMQSensor::_RO_CLEAN_AIR_FACTOR\fP to yeld the current RO\&. 
.PP
\fBReturns:\fP
.RS 4
The current RO\&. 
.RE
.PP

.PP
Definition at line 184 of file MQSensor\&.cpp\&.
.SS "float const MQSensor::MQGetPPM (const float sensor_tension, const float * gas_curve)\fC [protected]\fP"
Uses the gas curve declared in each \fBMQSensor\fP class to calculate the current gas concentration in parts per million\&. 
.PP
\fBParameters:\fP
.RS 4
\fIsensor_tension\fP T he current tension, usually measured with the \fBMQSensor::MQTension()\fP method\&. 
.br
\fIgas_curve\fP The A and B parameters of the exponential regression of the gas concentration curve\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The current gas concentration\&. 
.RE
.PP
Solves y = AB^x to obtain the current value\&.
.PP
Definition at line 248 of file MQSensor\&.cpp\&.
.SS "float const MQSensor::MQRead ()\fC [protected]\fP"
Reads the \fBMQSensor::_MQ_pin\fP port \fBMQSensor::_READ_SAMPLE_TIMES\fP times with a delay of \fBMQSensor::_READ_SAMPLE_INTERVAL\fP between the reading to give a stabilized output\&. 
.PP
\fBReturns:\fP
.RS 4
The averave readings of the \fBMQSensor::_MQ_pin\fP port\&. 
.RE
.PP

.PP
Definition at line 215 of file MQSensor\&.cpp\&.
.SS "float const MQSensor::MQResistanceCalculation (const float raw_adc)\fC [inline]\fP, \fC [protected]\fP"
Returns the tension on the sensor, solving the voltage divider for R1 as seen on https://en.wikipedia.org/wiki/Voltage_divider\&. The tension is given by a voltage divider, which has its load resistor set in _RL_VALUE, and can be adjusted in code if the sensor comes before or after the load resistor\&. 
.PP
\fBParameters:\fP
.RS 4
\fIraw_adc\fP The ADC value of the voltage divider on the _MQ_pin\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The resistance of the MQ sensor\&. 
.RE
.PP

.PP
Definition at line 165 of file MQSensor\&.cpp\&.
.SS "float MQSensor::MQTension (const float raw_adc)"
Returns the voltage either in the load resistor, or in the MQ sensor, either one that's between the \fBMQSensor::_MQ_pin\fP and the ground connection\&.
.PP
This is usually used as a part of the \fBMQSensor::MQGetPPM\fP function\&. 
.PP
\fBParameters:\fP
.RS 4
\fIraw_adc\fP The ADC value of the voltage divider on the \fBMQSensor::_MQ_pin\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
The tension value remapped to a float value between 0 and 5 volts\&. 
.RE
.PP

.PP
Definition at line 153 of file MQSensor\&.cpp\&.
.SS "\fBMQSensor\fP MQSensor::NewMQSensor (const uint8_t mqpin, const uint8_t mqtype)\fC [static]\fP"
\fBMQSensor::NewMQSensor\fP creates a \fBMQSensor\fP object of the correct sensor type\&. This function is to de used to create a \fBMQSensor\fP array of different sensor types\&. 
.PP
\fBParameters:\fP
.RS 4
\fImqpin\fP The arduino pin to which the sensor is connected\&. 
.br
\fImqtype\fP The type of the sensor, utilizing the SENSOR_TYPE enumeration\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
An instance of the chosen sensor\&. 
.RE
.PP

.PP
Definition at line 45 of file MQSensor\&.cpp\&.
.SS "void MQSensor::setCalibrationSampleInterval (const uint8_t csi)"
\fBMQSensor::_CALIBRATION_SAMPLE_INTERVAL\fP setter\&. 
.PP
Definition at line 111 of file MQSensor\&.cpp\&.
.SS "void MQSensor::setCalibrationSampleTimes (const uint8_t cst)"
\fBMQSensor::_CALIBARAION_SAMPLE_TIMES\fP setter\&. 
.PP
Definition at line 104 of file MQSensor\&.cpp\&.
.SS "void MQSensor::setReadSampleInterval (const uint8_t rsi)"
\fBMQSensor::_READ_SAMPLE_INTERVAL\fP setter\&. 
.PP
Definition at line 118 of file MQSensor\&.cpp\&.
.SS "void MQSensor::setReadSampleTimes (const uint8_t rst)"
\fBMQSensor::_READ_SAMPLE_TIMES\fP setter\&. 
.PP
Definition at line 125 of file MQSensor\&.cpp\&.
.SS "void MQSensor::setRlValue (const uint8_t rlvalue)"
\fBMQSensor::_RL_VALUE\fP setter\&. 
.PP
Definition at line 97 of file MQSensor\&.cpp\&.
.SS "void MQSensor::SetRo (const float ro_factor)"
\fBMQSensor::_Ro\fP setter\&. 
.PP
Definition at line 83 of file MQSensor\&.cpp\&.
.SS "void MQSensor::SetRoCleanAirFactor (const float ro_clean_air_factor)"
\fBMQSensor::_RO_CLEAN_AIR_FACTOR\fP setter\&. 
.PP
Definition at line 90 of file MQSensor\&.cpp\&.
.SH "Member Data Documentation"
.PP 
.SS "uint8_t MQSensor::_CALIBARAION_SAMPLE_TIMES = 5\fC [protected]\fP"

.PP
Definition at line 89 of file MQSensor\&.hpp\&.
.SS "uint8_t MQSensor::_CALIBRATION_SAMPLE_INTERVAL = 50\fC [protected]\fP"

.PP
Definition at line 90 of file MQSensor\&.hpp\&.
.SS "size_t MQSensor::_LAST_READ_TIME = 0\fC [protected]\fP"

.PP
Definition at line 86 of file MQSensor\&.hpp\&.
.SS "uint8_t MQSensor::_MQ_pin\fC [protected]\fP"

.PP
Definition at line 88 of file MQSensor\&.hpp\&.
.SS "uint8_t MQSensor::_READ_SAMPLE_INTERVAL = 50\fC [protected]\fP"

.PP
Definition at line 91 of file MQSensor\&.hpp\&.
.SS "uint8_t MQSensor::_READ_SAMPLE_TIMES = 5\fC [protected]\fP"

.PP
Definition at line 92 of file MQSensor\&.hpp\&.
.SS "size_t MQSensor::_READ_SENSOR_INTERVAL = 10000\fC [protected]\fP"

.PP
Definition at line 87 of file MQSensor\&.hpp\&.
.SS "float MQSensor::_RL_VALUE = 1\fC [protected]\fP"
The load resistance in the board, in kilo Ohms\&. The sensor prototyping board comes with a 1KOhm resistor in series after the MQ Sensor\&. 
.PP
Definition at line 99 of file MQSensor\&.hpp\&.
.SS "float MQSensor::_Ro = 10\fC [protected]\fP"
Acording to the datasheet, this should be equal to _RL_VALUE in a determined concentration of the gas\&. Currently unused\&. 
.PP
Definition at line 96 of file MQSensor\&.hpp\&.
.SS "float MQSensor::_RO_CLEAN_AIR_FACTOR = 9\&.83\fC [protected]\fP"
Basically a guess, comes in the datasheet\&. 
.PP
Definition at line 94 of file MQSensor\&.hpp\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for Canary from the source code\&.
